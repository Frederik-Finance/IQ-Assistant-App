<%- include('partials/header') -%>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IQ Assistant</title>
 
</head>
<body>

<div style="padding-top: 50px;"></div>
<input type="hidden" id="isAuthenticated" value="<%= locals.isAuthenticated %>">


<h1 class="text-4xl">Assessment Helper App</h1>

<% if (locals.isAuthenticated) { %>
    <p>You are logged in. <a href="/profile" class="underline">Request Access</a>.</p>
<% } else { %>
    <li><a href="/login/" class="underline">Login</a></li>
<% } %>

<div class="text-green-600 text-2xl font-bold mb-4 text-center" id="questions-left">
    Questions left: <span>50</span>
</div>


<div class="text-navy-700 text-xl font-bold mb-4 text-center">
    Question Deductions: <span id="deductions-count">0</span> 
</div>

<style>
    .text-navy-700 {
        color: #001F3F; /* This is a navy blue shade */
    }
</style>



<div id="drop-area" class="p-10 text-2xl border-4 border-dashed border-gray-400 rounded-lg text-center hover:bg-gray-100 cursor-pointer w-3/4 mx-auto my-10 h-[24rem]">
    Drop or Paste screenshot
</div>

<style>
   #drop-area img {
    max-width: 150px; /* Adjust as per your requirement */
    max-height: 150px; /* Adjust as per your requirement */
    margin: 10px;
    vertical-align: middle;
  }
</style>



<input type="text" id="answer" class="mt-5 w-full p-3 border rounded-md focus:border-blue-500 focus:ring focus:ring-blue-200" placeholder="Answer will appear here...">
<style>
    .btn-group {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 16px;  /* Use gap to set space between buttons */
        margin-top: 2rem;
    }

    .btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 12px 24px;
        width: 280px;  /* Fixed width for all buttons */
        border-radius: 8px;
        font-size: 16px;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .bg-green-500:hover, .bg-blue-500:hover, .bg-red-500:hover {
        filter: brightness(0.9);
    }
</style>

<div class="btn-group">
    <div class="btn bg-green-500 text-white" id="submit-btn">
        Submit
    </div>
    <div class="btn bg-blue-500 text-white" id="add-text-btn">
        Add Screenshot
    </div>
    <div class="btn bg-red-500 text-white" id="delete-last-btn">
        Delete Last
    </div>
</div>


<script>

const deductionsCountEl = document.getElementById('deductions-count');
let deductions = 0;

async function fetchAvailableQuestions() {
    try {
        const response = await fetch('/get-questions');

        if (!response.ok) {
            throw new Error('Failed to fetch available questions');
        }

        const data = await response.json();
        questionsLeftEl.textContent = data.availableQuestions;
        
    } catch (error) {
        console.error('Error:', error.message);
    }
}




function updateDeductionsCount() {
    deductionsCountEl.innerText = deductions;
}




const isAuthenticated = document.getElementById('isAuthenticated').value === 'true';

function checkAuthThenExecute(callback) {
    // You can modify the logic as required. Here's a basic check:
    if (!isAuthenticated) {
        window.location.href = '/login';
        return;
    }
    
    callback();
}


let dropArea = document.getElementById('drop-area');
let submitBtn = document.getElementById('submit-btn');
let deleteBtn = document.getElementById('delete-btn');

const addScreenshotBtn = document.getElementById('add-text-btn');
const deleteLastBtn = document.getElementById('delete-last-btn');

dropArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    e.stopPropagation();
});

dropArea.addEventListener('drop', (e) => {
    e.preventDefault();
    e.stopPropagation();

        handleFiles(e.dataTransfer.files);
});


function handleFiles(files) {
    if (files.length > 0) {
        let file = files[0];
        if (file.type.startsWith('image/')) {
            let reader = new FileReader();
            reader.onload = function (e) {
                let imageSource = e.target.result;
                displayImage(imageSource);
            }
            reader.readAsDataURL(file);
        }
    }
}


document.body.addEventListener('paste', (e) => {
    let clipboardData = e.clipboardData || window.clipboardData;
    if (!clipboardData) {
        return;
    }

    let items = clipboardData.items;
    for (let i = 0; i < items.length; i++) {
        if (items[i].type.indexOf("image") !== -1) {
            let blob = items[i].getAsFile();

            let URLObj = window.URL || window.webkitURL;
            let source = URLObj.createObjectURL(blob);

            displayImage(source);
        }
    }
});




let screenshots = []; // This array will act as the browser's folder to store screenshots

function addScreenshot() {
    const displayedImage = dropArea.querySelector('img');
    
    if (displayedImage) {
        const currentScreenshotURL = displayedImage.src;
        
        screenshots.push(currentScreenshotURL);
        deductions++;
        updateDeductionsCount();
    }
}



addScreenshotBtn.addEventListener('click', () => {
    checkAuthThenExecute(addScreenshot);
});



deleteLastBtn.addEventListener('click', () => {
    checkAuthThenExecute(async () => {
        if (screenshots.length > 0) {
            screenshots.pop();
             deductions--;
            updateDeductionsCount();
            
            // Remove the last image from the dropArea
            const imagesInDropArea = dropArea.querySelectorAll('img');
            if (imagesInDropArea.length > 0) {
                imagesInDropArea[imagesInDropArea.length - 1].remove();
            }
        }
        
        // If there are no screenshots left, update the dropArea text
        if (screenshots.length === 0) {
            dropArea.innerHTML = "Drop or Paste screenshot";
        }
    });
});



async function fetchBlobFromURL(blobURL) {
    const response = await fetch(blobURL);
    return await response.blob();
}



submitBtn.addEventListener('click', async () => {
    checkAuthThenExecute(async () => {
        // Add current screenshot if there's any
        addScreenshot();

        // Fetch blobs from the blob URLs
        const blobs = await Promise.all(screenshots.map(fetchBlobFromURL));

        // Create formData with the blobs
        const formData = new FormData();
        blobs.forEach((blob, index) => {
            formData.append('screenshots', blob, `screenshot${index}.png`);
        });

        // For debugging: Log each formData entry
        for (let [name, value] of formData.entries()) {
            console.log(name, value);
        }

        try {
            const response = await fetch('/submit-images', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const responseData = await response.json();
                console.log(responseData)
                document.getElementById('answer').value = responseData.answer || 'Received an unexpected response from the server.';
                
                // Reset deductions
                deductions = 0
                updateDeductionsCount()

                // get remaining
                fetchAvailableQuestions()
                console.log('Screenshots sent successfully.');
            } else {
                console.error('Error sending screenshots:', response.statusText);
            }
        } catch (error) {
            console.error('Error sending screenshots:', error);
        } finally {
            screenshots = []; // Reset screenshots array
        }
    });
});




function dataURLToBlob(dataURL) {
    const byteString = atob(dataURL.split(',')[1]);
    const mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
    const ab = new ArrayBuffer(byteString.length);
    const ia = new Uint8Array(ab);
    for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ab], {type: mimeString});
}


function displayImage(source) {
    const imgElement = document.createElement("img");
    imgElement.src = source;
    imgElement.alt = "Screenshot";
    imgElement.className = "max-w-full max-h-full";

    dropArea.appendChild(imgElement);
    document.getElementById('answer').value = "Screenshot received!";
}




async function createUser() {
    if (!isAuthenticated) {
        return;  // Do not try to create a .
    }

    try {
        const response = await fetch('/create-user', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error('Failed to create user');
        }
        const result = await response.json();
        console.log(result);
    } catch (error) {
        console.error('Error:', error.message);
    }
}


async function fetchAvailableQuestions() {
    try {
        const response = await fetch(`/get-questions`);

        if (!response.ok) {
            throw new Error('Failed to fetch available questions');
        }

        const data = await response.json();
        const questionsLeftEl = document.querySelector('#questions-left span');
        questionsLeftEl.textContent = data.availableQuestions;

    } catch (error) {
        console.error('Error:', error.message);
    }
}


window.onload = () => {
    createUser();
    fetchAvailableQuestions();
}

</script>

</body>
</html>

<%- include('partials/footer') -%>
